// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Applicant {
  id                      String   @id @default(cuid())
  email                   String   @unique
  fullName                String
  nickname                String?
  gender                  Gender?
  birthDate               String?
  faculty                 String?
  department              String?
  studyProgram            String?
  nim                     String?
  nia                     String?
  educationLevel          EducationLevel?
  previousSchool          String?
  padangAddress           String?
  phoneNumber             String?
  motivation              String?
  futurePlans             String?
  whyYouShouldBeAccepted  String?
  
  // Software proficiency
  corelDraw               Boolean  @default(false)
  photoshop               Boolean  @default(false)
  adobePremierePro        Boolean  @default(false)
  adobeAfterEffect        Boolean  @default(false)
  autodeskEagle           Boolean  @default(false)
  arduinoIde             Boolean  @default(false)
  androidStudio           Boolean  @default(false)
  visualStudio            Boolean  @default(false)
  missionPlaner           Boolean  @default(false)
  autodeskInventor        Boolean  @default(false)
  autodeskAutocad         Boolean  @default(false)
  solidworks              Boolean  @default(false)
  otherSoftware           String?
  
  // Document uploads (stored as base64 or file URLs)
  mbtiProof               String?
  photo                   String?
  studentCard             String?
  studyPlanCard           String?
  igFollowProof           String?
  tiktokFollowProof       String?
  
  // Application metadata
  status                  ApplicationStatus @default(SEDANG_DITINJAU)
  submittedAt             DateTime @default(now())
  updatedAt               DateTime @updatedAt
  
  @@map("applicants")
}

model Settings {
  id                String   @id @default(cuid())
  key               String   @unique
  value             String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("settings")
}

model Admin {
  id                String   @id @default(cuid())
  username          String   @unique
  email             String   @unique
  passwordHash      String
  fullName          String
  role              AdminRole @default(SUPER_ADMIN)
  isActive          Boolean  @default(true)
  lastLoginAt       DateTime?
  loginAttempts     Int      @default(0)
  lockedUntil       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  auditLogs         AuditLog[]
  sessionTokens     SessionToken[]
  
  @@map("admins")
}

model AuditLog {
  id                String   @id @default(cuid())
  adminId           String
  action            String   // LOGIN, LOGOUT, VIEW_APPLICATIONS, UPDATE_STATUS, etc.
  resource          String?  // applicant_id, setting_key, etc.
  details           String?  // JSON string with additional details
  ipAddress         String?
  userAgent         String?
  createdAt         DateTime @default(now())
  
  admin             Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)
  
  @@map("audit_logs")
}

model SessionToken {
  id                String   @id @default(cuid())
  adminId           String
  token             String   @unique
  expiresAt         DateTime
  isRevoked         Boolean  @default(false)
  createdAt         DateTime @default(now())
  revokedAt         DateTime?
  
  admin             Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)
  
  @@map("session_tokens")
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  MODERATOR
  
  @@map("admin_role")
}

enum Gender {
  LAKI_LAKI
  PEREMPUAN
  
  @@map("gender")
}

enum ApplicationStatus {
  SEDANG_DITINJAU
  DAFTAR_PENDEK
  INTERVIEW
  DITERIMA
  DITOLAK
  
  @@map("application_status")
}

enum EducationLevel {
  S1    // Strata 1
  D4    // Diploma 4
  D3    // Diploma 3
  
  @@map("education_level")
}